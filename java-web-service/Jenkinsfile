pipeline {
    
    agent any

    environment {
        SONAR_HOST_URL = "http://74.225.237.22:9000/"
        SONAR_PROJECT_KEY = 'transfer-service'
        SONAR_TOKEN = credentials('sonar-token')
        MAVEN_OPTS = "-Dmaven.repo.local=.m2/repository" // Maven caching
    }

    options {
        timestamps()                     // Adds timestamps to console output
        skipStagesAfterUnstable()       // Skips remaining stages if a stage is marked unstable
    }

    stages {

        stage("üì¶ Compile") {
            steps {
                script {
                    def serviceDir = "java-web-service"
                    dir(serviceDir) {
                        sh './mvnw compile'
                    }
                }
            }
        }
        stage("üß™ Unit Test + Code Coverage") {
            steps {
                script {
                    def serviceDir = "java-web-service"
                    dir(serviceDir) {
                        sh './mvnw test'
                    }
                }
            }
            post {
                always {
                    script {
                        def reportPath = "java-web-service/target/surefire-reports"
                        if (fileExists(reportPath)) {
                            junit "${reportPath}/*.xml"
                        } else {
                            echo "‚ùó No test reports found."
                        }
                        // Publish Jacoco code coverage
                        jacoco execPattern: '**/target/jacoco.exec'
                    }
                }
            }
        }
        stage("üîê SonarQube Static Code Scan") {
            steps {
                script {
                    def serviceDir = "week3/dev-ops/transfer-service"
                    dir(serviceDir) {
                        withSonarQubeEnv('SQ') {
                            echo 'üì° Submitting code to SonarQube...'
                            sh """
                                ./mvnw verify sonar:sonar \
                                    -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                                    -Dsonar.host.url=$SONAR_HOST_URL \
                                    -Dsonar.login=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }
        stage("üö¶ Quality Gate Check") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

    }

}