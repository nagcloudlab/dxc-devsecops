pipeline {
    
    agent any

    environment {
        SONAR_HOST_URL = "http://74.225.237.22:9000/"
        SONAR_PROJECT_KEY = 'transfer-service'
        SONAR_TOKEN = credentials('sonar-cred')
        MAVEN_OPTS = "-Dmaven.repo.local=.m2/repository" // Maven caching
    }

    options {
        timestamps()                     // Adds timestamps to console output
        skipStagesAfterUnstable()       // Skips remaining stages if a stage is marked unstable
    }

    stages {
        stage("üì¶ Compile") {
            steps {
                script {
                    def serviceDir = "java-web-service"
                    dir(serviceDir) {
                        sh './mvnw compile'
                    }
                }
            }
        }
        stage("üß™ Unit Test + Code Coverage") {
            steps {
                script {
                    def serviceDir = "java-web-service"
                    dir(serviceDir) {
                        sh './mvnw test'
                    }
                }
            }
            post {
                always {
                    script {
                        def reportPath = "java-web-service/target/surefire-reports"
                        if (fileExists(reportPath)) {
                            junit "${reportPath}/*.xml"
                        } else {
                            echo "‚ùó No test reports found."
                        }
                        // Publish Jacoco code coverage
                        jacoco execPattern: '**/target/jacoco.exec'
                    }
                }
            }
        }
        // stage("üîê SonarQube Static Code Scan") {
        //     steps {
        //         script {
        //             def serviceDir = "java-web-service"
        //             dir(serviceDir) {
        //                 withSonarQubeEnv('SQ') {
        //                     echo 'üì° Submitting code to SonarQube...'
        //                     sh """
        //                         ./mvnw sonar:sonar \
        //                             -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        //                             -Dsonar.host.url=$SONAR_HOST_URL \
        //                             -Dsonar.login=$SONAR_TOKEN
        //                     """
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage("üö¶ Quality Gate Check") {
        //     steps {
        //         timeout(time: 2, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        stage("üì¶ Package Artifact") {
            steps {
                script {
                    def serviceDir = "java-web-service"
                    dir(serviceDir) {
                        // Add build metadata for traceability
                        sh "echo 'Build: ${BUILD_NUMBER}, Commit: \$(git rev-parse --short HEAD)' > src/main/resources/build-info.txt"
                        retry(2) {
                            sh './mvnw package -DskipTests'
                        }
                    }
                }
            }
        }
        // stage("üîç Static Code Scans (Parallel)") {
        //     parallel {
        //         stage("üïµÔ∏è Bytecode Scan (SpotBugs)") {
        //             steps {
        //                 script {
        //                     def serviceDir = "java-web-service"
        //                     dir(serviceDir) {
        //                         sh './mvnw spotbugs:spotbugs spotbugs:check'
        //                     }
        //                 }
        //             }
        //             post {
        //                 always {
        //                     script {
        //                         def xml = 'java-web-service/target/spotbugsXml.xml'
        //                         def html = 'java-web-service/target/spotbugs.html'

        //                         if (fileExists(xml)) {
        //                             // Convert XML to HTML (requires xsltproc and spotbugs.xsl)
        //                             sh "xsltproc spotbugs.xsl ${xml} > ${html} || true"

        //                             archiveArtifacts artifacts: html, allowEmptyArchive: true
        //                             publishHTML(target: [
        //                                 reportDir: 'java-web-service/target',
        //                                 reportFiles: 'spotbugs.html',
        //                                 reportName: 'Find Security Bugs Report'
        //                             ])
        //                         } else {
        //                             echo "‚ùó SpotBugs report not found."
        //                         }
        //                     }
        //                 }
        //             }
        //         }
        //         stage("üì¶ OWASP Dependency Scan") {
        //             steps {
        //                 script {
        //                     def serviceDir = "java-web-service"
        //                     dir(serviceDir) {
        //                         // Fail build if vulnerabilities ‚â• CVSS 7
        //                         sh './mvnw org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7'
        //                     }
        //                 }
        //             }
        //             post {
        //                 always {
        //                     archiveArtifacts artifacts: 'java-web-service/target/dependency-check-report.html', allowEmptyArchive: true
        //                     publishHTML(target: [
        //                         reportDir: 'java-web-service/target',
        //                         reportFiles: 'dependency-check-report.html',
        //                         reportName: 'OWASP Dependency Report'
        //                     ])
        //                 }
        //             }
        //         }
        //     }
        // }
        stage("üöÄ Deploy to Nexus") {
            steps {
                input message: 'Do you want to deploy?', ok: 'Deploy'
                withCredentials([file(credentialsId: 'nexus-cred', variable: 'SETTINGS_XML')]) {
                    script {
                        def serviceDir = "java-web-service"
                        dir(serviceDir) {
                            sh './mvnw deploy -DskipTests -s $SETTINGS_XML'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßº Cleaning workspace..."
            cleanWs()
        }
        success {
            echo "‚úÖ Build #${BUILD_NUMBER} completed successfully."
            // Optional: Enable Slack notification
            // slackSend channel: '#ci-cd', message: "‚úÖ transfer-service #${env.BUILD_NUMBER} passed"
        }
        failure {
            echo "‚ùå Build #${BUILD_NUMBER} failed."
            // slackSend channel: '#ci-cd', message: "‚ùå transfer-service #${env.BUILD_NUMBER} failed"
        }
    }
}
